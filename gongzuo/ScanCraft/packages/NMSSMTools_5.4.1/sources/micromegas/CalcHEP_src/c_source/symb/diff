29d28
< int ldModelStatus=0;
38a38
> static int lastModel=0;
41,44d40
< static int * vSorted=NULL;
< static int nSortedVar;
< static int testingVar;
< 
60c56
<    if(blind==1) { printf("ERROR:%s\n",errorText); exit(125);} else messanykey(2,10,errorText);
---
>    if(blind) printf("ERROR:%s\n",errorText); else messanykey(2,10,errorText);
81a78
>   
105,156c102,106
< static int findVarFast(char*name)
< {  int c1=1,c2=nSortedVar,c3;
< 
<    int d=strcmp(name,modelvars[vSorted[c1]].varname);
<    if(d==0) return vSorted[c1];
<    if(d<0) return -1;
<    d=strcmp(name,modelvars[vSorted[c2]].varname);
<    if(d==0) return vSorted[c2]; 
<    if(d>0)  return -1;
<           
<    for(;;)
<    { 
<       if(c2-c1<=1) return -1;
<       c3=(c1+c2)/2;
<       d=strcmp(name,modelvars[vSorted[c3]].varname);
<       if(d==0) return vSorted[c3];
<       if(d>0) c1=c3; else c2=c3;
<    }   
< }
< 
< 
< 
< static void sortVariables(void)
< {  int i;
<    int nv1=nmodelvar+1;
<    
<    nSortedVar=nmodelvar;
< 
<    vSorted=realloc(vSorted,sizeof(int)*nv1);
<    int*vSorted_=malloc(sizeof(int)*nv1);
<    for(i=0;i<nv1;i++) vSorted[i]=i;
<    int b=1 ;
<    for(b=1;b<nv1;b*=2)
<    {  int k;
<       memcpy(vSorted_,vSorted,nv1*sizeof(int));
<       for(k=0; k<1+nv1/(2*b); k++)
<       { int i1=2*k*b,i2,e1,e2;
<         e1=i1+b;
<         if(e1> nv1) e1= nv1;
<         i2=e1;
<         e2=i2+b;if(e2> nv1)e2=  nv1;
<         for(i=2*k*b; i1<e1 || i2<e2;i++)
<         {      if(i2==e2) vSorted[i]=vSorted_[i1++];
<           else if(i1==e1) vSorted[i]=vSorted_[i2++];
<           else if( strcmp(modelvars[vSorted_[i1]].varname,modelvars[vSorted_[i2]].varname)<=0)
<                 vSorted[i]=vSorted_[i1++]; 
<           else  vSorted[i]=vSorted_[i2++];
<         } 
<       }
<    }
<    
<    free(vSorted_); 
---
> static int  isOriginName(char* s)
> {
>   int k;
>   for(k=1;k<=nmodelvar;k++) if (strcmp(s,modelvars[k].varname) == 0) return 0; 
>   return 1;
159d108
< 
189,200d137
< {  int n;
< 
<    if(isdigit(s[0])) return &Number;
<    if(s[0]=='"')  return  &String;
<    if (strcmp(s,"Q")==0) depQ=1;
<    n=findVarFast(s); 
<    if(n>=testingVar || n<0) {rderrcode=unknownidentifier; return NULL;} 
<    if(setPub) modelvars[n].pub=-1;
<    return &Number;
< }  
< 
< static void * rd_33_nocheck(char*s)
205a143,145
>    for(i=1;i<=nmodelvar;i++) if(strcmp(modelvars[i].varname,s) == 0) 
>    {  
>       if(setPub && modelvars[i].pub==0 && modelvars[i].func) modelvars[i].pub=-1; 
206a147,148
>    }
>    rderrcode=unknownidentifier; return NULL;   
210,211d151
< 
<                                 
218a159
>   int       commentShift,funcShift;
226d166
<   void* (*rd)(char*);
246a187
>   commentShift=tabCharPos(vars_tab.format,2);
251c192
<   for(i=0;i<=nv;i++) 
---
>   for(i=0;i<nv;i++) 
258d198
<      modelvars[i].line=0;
263a204,205
>   
>   
277,282c219,220
<       if(i<=nv0){ if(check)
<                   {  char txt[50];
<                      sprintf(txt,"Variable %s ignored",resName[i]); 
<                      messanykey(10,10,txt);   
<                   }  continue;
<                 }
---
>       if(i<=nv0) continue;
>         
287a226,230
>       if (check &&  (! isOriginName(name)) )
>       {  errorMessage("Name","duplicate name '%s'",name);   
>          goto errExi1;
>       }
> 
298,299d240
<       mvars->line=nLine;
<       mvars->pub=1;
303a245,246
>    commentShift=tabCharPos(func_tab.format,2);
>    funcShift=tabCharPos(func_tab.format,1);
309,310c252,253
<       name[0]=0; sscanf(ss," %[^|]",name);   
<       trim(name);
---
>       name[0]=0;
>       sscanf(ss," %[^|]",name);
311a255
>       trim(name);
313c257
<       { 
---
>       {  setPub=0;
316,317c260,265
<          {  if(strcmp(name,"%Local!")==0) nCommonVars=nmodelvar;
<             continue;
---
>          {  if(strcmp(name,"%Local!")==0) 
>             { nCommonVars=nmodelvar;
>               if(nCommonVars >= aWidth1)
>               { 
>                 errorMessage("Name","The '!Local' label  below call of aWidth()","*");  
> 	        goto errExi1;
319,324d266
<          for(i=1;i<=nv0;i++) if( strcmp(name,resName[i])==0) break;
<          if(i<=nv0){   if(check)
<                        { char txt[50];
<                          sprintf(txt,"Constraint %s ignored",resName[i]); 
<                          messanykey(10,10,txt);   
<                        }  continue;
325a268,271
>             continue;
>          }
>          for(i=1;i<nv0;i++) if( strcmp(name,resName[i])==0) break;
>          if(i<nv0)  continue;
332,349c278,280
<       nmodelvar++;
<       
<       mvars=modelvars+nmodelvar;
<       strcpy(mvars->varname,name);
<       mvars->func=strchr(ln->line,'|')+1;
<       mvars->line=nLine;
<    }
< 
<    sortVariables();
<    if(check) // duplicate name 
<    for(i=1;i<=nmodelvar;i++) if(strcmp(modelvars[vSorted[i]].varname,modelvars[vSorted[i-1]].varname)==0)
<    {  
<        
<       if(modelvars[vSorted[i]].func)  tabName=func_tab.headln; else tabName=vars_tab.headln; 
<       nLine=modelvars[vSorted[i]].line;  
<       rderrpos=1;
<       errorMessage("Name","duplicate name '%s'",modelvars[vSorted[i]].varname);  
<       return 1;
---
>       if ( check && (! isOriginName(name)) )
>       {  errorMessage("Name","duplicate name '%s'",name);
> 			goto errExi1;
351,357d281
<    if(check) rd=rd_33;else rd=rd_33_nocheck;
< // Completeness 
<    setPub=0;
<    for(i=1;i<=nmodelvar;i++) if(modelvars[i].func)
<    {  testingVar=i;
<       tabName=func_tab.headln;
<        nLine=modelvars[i].line; 
359d282
<        depQ=0;
361c284,286
<        if(readExpression(modelvars[i].func,rd, act_33,NULL)==&String) rderrcode=typemismatch;
---
>       depQ=0;
> 
>       if(readExpression(ln->line+funcShift,rd_33, act_33,NULL)==&String) rderrcode=typemismatch;
366c291,292
<              sscanf(modelvars[i].func  +rderrpos-1,"%[^^|*+-/)(. ]",buff);
---
>           
>             sscanf(ln->line+funcShift+rderrpos-1,"%[^|*+-/)(.% ]",buff);
369c295
<            { char ch=modelvars[i].func[rderrpos-1];
---
>           { char ch=ln->line[funcShift+rderrpos-1];
376,380c302,310
<        if(ExtFunc && i>nCommonVars) nCommonVars=i;
<        if(depQ   &&  i>depQ1)  depQ1=i;
<        if(check&&aWidth)
<        { errorMessage("Expression","%s","'aWidth()' - unlegal function");
<          return 0;
---
>       if(aWidth && aWidth1 > nmodelvar+1)  aWidth1=nmodelvar+1; 
>       if(depQ   && depQ1   > nmodelvar+1)  depQ1  =nmodelvar+1;   
>       if(ExtFunc) 
>       { 
>         nCommonVars=nmodelvar+1;
>         if(nCommonVars>=aWidth1)
>         { 
> 	  errorMessage("Expression","Call of external functions after aWidth()","*");
> 	  goto errExi1;
383a314,320
>       nmodelvar++;
>       
>       mvars=modelvars+nmodelvar;
>       strcpy(mvars->varname,name);
>       mvars->func=ln->line+funcShift;
>       mvars->pub=setPub;
>    }  
385d321
<    testingVar=nmodelvar;
393c329
<    free (modelvars);
---
> //   free (modelvars);
398a335,353
> 
> static int  findvar(char* txt,double* num, int *pos)
> {
>    int  i;
> 
>    trim(txt);
>    for(i=1;i<=nmodelvar;i++)
>    { 
>      if(strcmp(txt,modelvars[i].varname)==0)
>      {
>         if(num) *num = modelvars[i].varvalue;
>         if(pos) *pos =i;
>         return 0;
>       }
>    }
>    return -1;
> }
> 
> 
571d525
< 
584,586c538,540
<       {  
<          int pos=findVarFast(massname);
<          if(pos<0)
---
>       {  int pos;
>          errcode=findvar(massname,NULL,&pos);
>          if (check && (errcode != 0))
589a544,556
>          }else if(pos<nv0)
>          {
>            errorMessage("mass","illegal variable %s",massname);
>            return 0;
>          }
>          else if(!strchr(chlp,'*'))
>          {  if(pos>nCommonVars) nCommonVars=pos;
>             if(nCommonVars >= aWidth1) 
>             {
>                 errorMessage("mass","definition of mass %s after aWidth() call",
>                                 massname);
>                 return 0;
>             }                
591,592d557
<          
<          if(strcmp(chlp,"*")) if(pos>nCommonVars) nCommonVars=pos;
604,606c569,574
<       if(imassname[0]=='!')
<       { 
<         imassname[0]=' ';
---
>       if(strcmp(imassname,"0") != 0)
>       {  int pos;
>          errcode=findvar(imassname,NULL,&pos);
>          if(errcode)  
>          {  if(imassname[0]=='!') 
>             {  imassname[0]=' ';  
608,610c576
<         if(check)
<         {
<            if(!isVarName(imassname) )
---
>                if(check && (!isVarName(imassname)) )
614,618c580
<            if(findVarFast(imassname)>0)
<            { errorMessage("width","%s used variable, not accepted for automatic width",imassname);
<                  return 0;
<            }
<            for(i=nSortedVar+1;i<=nmodelvar;i++) if(strcmp(modelvars[i].varname,imassname)==0)
---
>                if(check && (!isOriginName(imassname)) )                            
622c584
<         }   
---
>                { varlist mvars=modelvars+1+nmodelvar; 
624,626c586,589
<         strcpy(modelvars[nmodelvar].varname,imassname);
<         modelvars[nmodelvar].pwidth=nparticles;     
<       } else if(check && strcmp(imassname,"0") && findVarFast(imassname)<0)
---
>                   strcpy(mvars->varname,imassname);
>                   mvars->pwidth=nparticles;
>                }                                                     
>             }else 
631c594,599
<          
---
>          } else if(pos<nv0)
>          {
>            errorMessage("width","illegal variable %s",imassname);
>            return 0;  
>          }
>       }
641,642c609
<          if (((itmp!=1)&&(itmp!=3)&&(itmp!=8)&& (itmp!=6))
<             ||((itmp==3)&&(strcmp(p1,p2)==0)) ||((itmp==6)&&(strcmp(p1,p2)==0))) 
---
>          if (((itmp!=1)&&(itmp!=3)&&(itmp!=8))||((itmp==3)&&(strcmp(p1,p2)==0))  )
667d633
<                                 
722d687
<         if (prtclbase[np1-1].cdim == 6) prtclbase[nparticles-1].cdim = -6;
776c741
<   if(rderrcode )
---
>   if (rderrcode )
800,801c765,766
<     err=findVarFast(vardef->vars[n].name);
<     if(err<0 && strcmp(vardef->vars[n].name,strongconst))
---
>     err=findvar(vardef->vars[n].name,NULL,NULL);
>     if (err)
833,834c798,799
<     err=findVarFast (vardef->vars[n].name);
<     if (err<0)
---
>     err=findvar (vardef->vars[n].name,NULL,NULL);
>     if (err)
879c844
<   int mLine,spinorNumb;
---
>   int mLine,totcolor,color,spinorNumb;
923,924c888,889
<     for(lgrgn->comcoef=ln->line,i=0;i<4;lgrgn->comcoef++) if(lgrgn->comcoef[0]=='|')i++;
<     lgrgn->description=strchr(lgrgn->comcoef,'|')+1;
---
>     lgrgn->comcoef=    ln->line+factorShift;
>     lgrgn->description=ln->line+lorentzShift;
929c894
<       int color=1;
---
>       totcolor=1;
931d895
<       switch(prtclbase[lgrgn->fields[mm] -1].cdim)
933,937c897,899
<         case  8: color*=2; break;
<         case  3: color*=3; break;
<         case -3: color*=5; break;
<         case  6: color*=7; break;
<         case -6: color*=11;break;  
---
>         color=prtclbase[lgrgn->fields[mm] -1].cdim;
>         if (color==-3) color=5;
>         totcolor=totcolor*color;
939,946c901,902
< //printf("color=%d\n",color);      
<       switch(color)
<       { case 1: 
<         case 4:  case 15: case 77: 
<         case 30: case 154: case 8: 
<         case 27: case 125:
<         case 99: case 175: break;
<         default:  errorMessage("Lorentz part","wrong color structure");
---
>       if( (totcolor!=1)&&(totcolor!=15)&&(totcolor!=64)&&(totcolor!=120)&&(totcolor!=512) )
>       {   errorMessage("Lorentz part","wrong color structure");
958,959d913
<     if (! testLgrgn(lgrgn) )  { clearVars(vardef); return 0;}
< 
960a915
>     if (! testLgrgn(lgrgn) )  { clearVars(vardef); return 0;}
966c921,922
<    for(lgrgn1 = lgrgn; lgrgn1; lgrgn1=lgrgn1->next)   /*     Sorting    */
---
>    lgrgn1 = lgrgn;   /*     Sorting    */
>    if(lgrgn1) do
990c946,947
<   }
---
>       lgrgn1 = lgrgn1->next;
>   }  while (lgrgn1 != NULL);
1082c1039,1042
<    for(lgrgn1 = lgrgn;lgrgn1;lgrgn1 = lgrgn1->next)   
---
>   if(!lgrgn) return;
>    
>    lgrgn1 = lgrgn;
>    do
1139c1099,1100
<    }
---
>       lgrgn1 = lgrgn1->next;
>    }  while (lgrgn1 != NULL);
1146,1147d1106
<   int photon=-1;
<   for(i=0;i<nparticles;i++) if(prtclbase[i].nHerm) prtclbase[i].q3=0;
1151c1110
<     for(i=0;i<nparticles;i++) if(ghostmother(i+1)==i+1 && prtclbase[i].q3==unknownQ3)
---
>     for(i=0;i<nparticles;i++) if(/*prtclbase[i].hlp!='*' &&*/   ghostmother(i+1)==i+1 && prtclbase[i].q3==unknownQ3)
1164,1189d1122
<     
<     if(cont==0 &&  photon!=-2)
<     { 
<       if(photon==-1) for(photon=0;photon<nparticles;photon++)
<       {
<         if( ghostmother(photon+1)==photon+1 && prtclbase[photon].N==22) break;
<            
<       }
<       if(photon==nparticles) photon=-2;      	
<       if(photon>=0) for(i=0;i<nparticles;i++) if(ghostmother(i+1)==i+1 && prtclbase[i].q3==unknownQ3)
<       {  decaylink dec=prtclbase[i].top;
<          int i_=prtclbase[i].anti-1;
<         
<          for(;dec;dec=dec->next)
<          {  
<             if(dec->part[2]==0 && ( (dec->part[0]-1==photon && dec->part[1]-1==i)
<                                  || (dec->part[1]-1==photon && dec->part[0]-1==i))) break;                   
<          }
<          if(dec==NULL)
<          {  prtclbase[i].q3=0;
<             prtclbase[i_].q3=0;
<             cont=1;
<          }             
<       }
<       photon=-2;
<     }
1254d1186
< 
1258,1262c1190
<   if(ldModelStatus&1==0) {sprintf(errorText,"model files are not read\n");    return 0;} 
<   
<   if((!check) && (ldModelStatus&2)==2 && (ldModelStatus&4)==4*ugForce) return 1;
<   ldModelStatus=1;
<   
---
>   if( (!check)&&(lastModel == n_model) ) return 1;
1264,1265d1191
<   
<    
1268a1195
>   modelvars[nmodelvar].func=NULL;
1274,1275c1201
<   ldModelStatus=1+2+4*ugForce;
<   
---
>   lastModel = n_model;
1284d1209
<    ldModelStatus=0; 
1294a1220
>    lastModel=0;
1311d1236
<        return err; 
1312a1238
>      if(err) return err;  
1314d1239
<    ldModelStatus=1;
1318a1244,1253
> int read2VarsParticles(void)
> {
>    errorText[0]=0;
>    blind=1;
>   
>    if(!readvars(1) ) return 1;   
>    if(!readparticles(1,0))     return 2;
>    return 0;
> }
> 
1449c1384
<   for(i=nv0;i<nmodelvar;i++)
---
>   for(i=nv0;i<=nmodelvar;i++)
